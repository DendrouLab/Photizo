def adjustedIntegrate(x0, x1, X, Y):
    '''
    Integrates the function generated by linearly interpolating the data X, Y
    between x0 and x1. Unlike nIntegrate, this function controls for baseline differences by subtracting the area between the lowest point of the curve and zero.

    Inputs:
        X: Vector with ordered wavelengths
        Y: Ordered matrix with all spectra
        x0: starting wavelength of interest
        x1: end wavelength of interest
        
    Output:
        Vector containing calculated area of interest for each spectra controlling for the spectral baseline
        
    '''
    from photizo.preprocessing.bracketPoint import bracketPoint
    from photizo.preprocessing.linearInterpolate import linearInterpolate
    from photizo.quantification.nIntegrate import nIntegrate
    
    base = nIntegrate(x0,x1, X, Y)
    
    i0 = bracketPoint(x0, X)
    i1 = bracketPoint(x1, X)
    
    yL = linearInterpolate(X[i0:i0+2], Y[i0:i0+2], x0)
    yR = linearInterpolate(X[i1:i1+2], Y[i1:i1+2], x1)

    
    return base - 0.5*(yL+yR)*(x1-x0)
